plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
}

group = 'practice'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = "0.8.12"
}

def jacocoDir = layout.buildDirectory.dir("reports/")

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
	QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
		// 측정 안하고 싶은 패턴
		"**/*Application*",
		"**/*Config*",
		"**/*Exception*",
		"**/*Request*",
		"**/*Response*",
		"**/*Dto*",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/*Entity*",
		"**/*Error*/**",
		"**/test/**",
		"**/resources/**",
		"**/global/**"
]

jacocoTestCoverageVerification {

	violationRules {
		rule {
			// rule 활성화
			enabled = true

			// 클래스 단위로 룰 체크
			element = 'CLASS'

			// 라인 커버리지를 최소 80% 만족
//			limit {
//				counter = 'LINE'
//				value = 'COVEREDRATIO'
//				minimum = 0.80
//			}

			// 브랜치 커버리지를 최소 80% 만족
//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
//				minimum = 0.80
//			}

			excludes = jacocoExcludePatterns + QDomains
		}
	}
}

jacocoTestReport {
	dependsOn test	// 테스트가 수행되어야만 report를 생성할 수 있도록 설정
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
		csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // Querydsl 관련 제거
				})
		)
	}
	finalizedBy jacocoTestCoverageVerification
}

sonar {
	properties {
		property "sonar.projectKey", "practice-service_setting-practice"
		property "sonar.organization", "practice-service"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoDir.get().file("jacoco/index.xml").asFile
	}
}
